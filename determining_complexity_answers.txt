

  1)  O(1).

  2)  O(n). It will run through once, finding the largest number in the collection. There is no other real work do be done with it.

  3)   Linear. In this case, n is a two dimensional array.
  One way to iterate over every element of a two dimensional array, is by using a nested loop like this method does. Generally, a nested loop would suggest that the running time is O(n^2),
  but since the input is two dimensional, we're still really iterating only over n. For instance, a collection that is a 4x4 2D array has a size (n) of 16. When that array is passed to find_largest,
   the outside loop, `collection.length.times`, will execute four times. Within those four executions, the `subcollection.length.times` loop will execute a total of 16 times, which is equal to n in this case.

  4)  Exponential is the closest.

  5)  O(n). The temp, num1, num2 items have nothing to do wth how many operations are run. It's all about n and i.

  6)  The Big O is exponential. It is a quick sort
